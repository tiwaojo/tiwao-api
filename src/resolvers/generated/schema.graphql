### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Represents the highest level of education achieved by a user"""
type Education {
  description: String
  endDate: DateTime!
  fieldOfStudy: String!
  id: ID!

  """@unique"""
  institution: String!
  startDate: DateTime!
  user: User!
  userId: ID!
}

"""Represents the highest level of education achieved by a user"""
input EducationInput {
  description: String
  endDate: DateTime!
  fieldOfStudy: String!
  id: ID

  """@unique"""
  institution: String!
  startDate: DateTime!
}

"""Represents the experiences a user has had in their career"""
type Experience {
  """
  `company`(optional): Represents the company the user was employed at in the experience. Pertains only to experience type `WORK`\nRepresents the company the user was employed at in the experience. Pertains only to experience type `WORK`
  """
  company: String

  """`description`(optional): A brief description of the experience"""
  description: String

  """`endDate`: The end date of the experience."""
  endDate: DateTime!

  """
  `id`: The id of the experience. This is a one to many relationship using the `experienceId` field as a foreign key
  """
  id: ID!

  """
  `imgSrc`(optional): The image source of the experience. This can be the logo of the company or the project
  """
  imgSrc: String

  """
  `role`(optional): Represents the role of the user in the experience. Pertains only to experience type `WORK`\nRepresents the role of the user in the experience. Pertains only to experience type `WORK`
  """
  role: String

  """`startDate`: The start date of the experience."""
  startDate: DateTime!

  """`title`: The title/name of the experience"""
  title: String!

  """
  `tools`(optional): A list of tools through which the experience was gained. This can be a list of programming languages, frameworks, libraries, etc.
  """
  tools: [String!]!

  """`type`: The type of experience. This can be either `WORK` or `PROJECT`"""
  type: ExperienceType!

  """
  `url`: The url of the experience. This can be the url of the project or the company the user worked at
  """
  url: String!

  """
  `user`: The user to whom the experience belongs. This is a one to many relationship
  """
  user: User!

  """
  `userId`: The id of the user to whom the experience belongs. This is a one to many relationship using the `userId` field as a foreign key
  """
  userId: String
}

"""Represents the experiences a user has had in their career"""
input ExperienceInput {
  """
  `company`(optional): Represents the company the user was employed at in the experience. Pertains only to experience type `WORK`\nRepresents the company the user was employed at in the experience. Pertains only to experience type `WORK`
  """
  company: String

  """`description`(optional): A brief description of the experience"""
  description: String

  """`endDate`: The end date of the experience."""
  endDate: DateTime!

  """
  `id`: The id of the experience. This is a one to many relationship using the `experienceId` field as a foreign key
  """
  id: ID

  """
  `imgSrc`(optional): The image source of the experience. This can be the logo of the company or the project
  """
  imgSrc: String

  """
  `role`(optional): Represents the role of the user in the experience. Pertains only to experience type `WORK`\nRepresents the role of the user in the experience. Pertains only to experience type `WORK`
  """
  role: String

  """`startDate`: The start date of the experience."""
  startDate: DateTime!

  """`title`: The title/name of the experience"""
  title: String!

  """
  `tools`(optional): A list of tools through which the experience was gained. This can be a list of programming languages, frameworks, libraries, etc.
  """
  tools: [String!]!
  type: ExperienceType! = PROJECT

  """
  `url`: The url of the experience. This can be the url of the project or the company the user worked at
  """
  url: String!

  """
  `userId`: The id of the user to whom the experience belongs. This is a one to many relationship using the `userId` field as a foreign key
  """
  userId: String
}

enum ExperienceType {
  PROJECT
  WORK
}

type Location {
  city: String!
  country: String!
  id: ID!
  province: String!
}

input LocationInput {
  city: String!
  country: String!
  id: ID
  province: String!
}

type Mutation {
  createUser(
    """The user to create"""
    user: UserInput!
  ): User
  deleteExpereince(
    """The deleted experience id"""
    id: ID!
  ): Experience
  deleteSocial(
    """The deleted social id"""
    id: ID!
  ): Social
  deleteUser(
    """The deleted user id"""
    id: ID!
  ): User

  """update skills to a user"""
  updateSkills(
    """The skills to update"""
    skills: [String!]!

    """The user to update"""
    userId: ID!
  ): User

  """update an education to a user"""
  upsertEducation(
    """The education to update"""
    education: EducationInput!

    """The user id"""
    userId: ID!
  ): Education

  """update an experience to a user"""
  upsertExperience(
    """The experience to update"""
    experience: ExperienceInput!
  ): Experience

  """update a location to a user"""
  upsertLocation(
    """The location to update"""
    location: LocationInput!

    """The user id"""
    userId: ID!
  ): Location

  """update a social to a user"""
  upsertSocial(
    """The social to update"""
    social: SocialInput!

    """The social id"""
    socialId: ID!
  ): Social
}

type Query {
  """Get all education of a user"""
  getEducationById(
    """The id of the education"""
    id: ID!

    """The start date of the experience"""
    userId: ID!
  ): [Education]

  """Get an experience by its id"""
  getExperience(
    """The id of the experience"""
    id: ID

    """The user id of the experience"""
    userId: ID
  ): [Experience]

  """Get all experiences os a user"""
  getExperiences(
    """The end date of the experience"""
    endDate: String

    """The type of the experience"""
    experienceType: ExperienceType! = PROJECT

    """The start date of the experience"""
    startDate: String

    """The user id of the experience"""
    userId: ID!
  ): [Experience]

  """Get all socials"""
  getSocials: [Social]

  """Get all socials of a user"""
  getSocialsById(
    """The start date of the experience"""
    userId: ID!
  ): [Social]

  """Get a user by its id"""
  getUser(
    """The id of the user"""
    id: ID!
  ): User

  """Get a user by its email"""
  getUserByEmail(
    """The email of the user"""
    email: String = "employ@tiwaojo.com"
  ): User

  """Get all users"""
  getUsers: [User]
}

"""Represents the socials through which a user can be reached"""
type Social {
  id: ID!
  platform: String!
  url: String!
  user: User
  userId: String
}

"""Represents the socials through which a user can be reached"""
input SocialInput {
  platform: String!
  url: String!
  userId: String
}

"""Represents a user of the application"""
type User {
  """`about`(optional): A brief description of the user"""
  about: String

  """
  `education`(optional): Represents the highest level of education achieved by the user.
  """
  education: Education

  """`email`: The email of the user"""
  email: String!

  """
  `experiences`(optional): A list of experiences the user has had in their career. This can be a list of work experiences, projects, etc.
  """
  experiences: [Experience!]!

  """`firstName`: The first name of the user"""
  firstName: String!

  """
  `userId`: The id of the user to whom the experience belongs. This is a one to many relationship using the `userId` field as a foreign key
  """
  id: ID!

  """`lastName`: The last name of the user"""
  lastName: String!

  """
  `location`(optional): The location of the user. This can be a city, a country, or a province
  """
  location: Location

  """
  `skills`(optional): A general list of skills the user has. This can be a list of programming languages, frameworks, libraries, etc.
  """
  skills: [String]!

  """
  `socials`(optional): A list of socials through which the user can be reached. This can be a list of social media platforms, websites, etc.
  """
  socials: [Social!]!

  """
  `title`: The title of the user. This can be a job title, a role, or a position
  """
  title: String!
}

"""Represents a user of the application"""
input UserInput {
  """`about`(optional): A brief description of the user"""
  about: String

  """
  `education`(optional): Represents the highest level of education achieved by the user.
  """
  education: EducationInput

  """`email`: The email of the user"""
  email: String!

  """
  `experiences`(optional): A list of experiences the user has had in their career. This can be a list of work experiences, projects, etc.
  """
  experiences: [ExperienceInput]!

  """`firstName`: The first name of the user"""
  firstName: String!

  """`lastName`: The last name of the user"""
  lastName: String!

  """
  `location`(optional): The location of the user. This can be a city, a country, or a province
  """
  location: LocationInput

  """
  `skills`(optional): A general list of skills the user has. This can be a list of programming languages, frameworks, libraries, etc.
  """
  skills: [String!]

  """
  `socials`(optional): A list of socials through which the user can be reached. This can be a list of social media platforms, websites, etc.
  """
  socials: [SocialInput!]

  """
  `title`: The title of the user. This can be a job title, a role, or a position
  """
  title: String!
}