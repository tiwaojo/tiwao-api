/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { GraphQLContext } from "./../../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  EducationInput: { // input type
    description?: string | null; // String
    endDate: NexusGenScalars['DateTime']; // DateTime!
    fieldOfStudy: string; // String!
    id?: string | null; // ID
    institution: string; // String!
    startDate: NexusGenScalars['DateTime']; // DateTime!
  }
  ExperienceInput: { // input type
    company?: string | null; // String
    description?: string | null; // String
    endDate: NexusGenScalars['DateTime']; // DateTime!
    id?: string | null; // ID
    imgSrc?: string | null; // String
    role?: string | null; // String
    startDate: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    tools: string[]; // [String!]!
    type: NexusGenEnums['ExperienceType']; // ExperienceType!
    url: string; // String!
    userId?: string | null; // String
  }
  LocationInput: { // input type
    city: string; // String!
    country: string; // String!
    id?: string | null; // ID
    province: string; // String!
  }
  SocialInput: { // input type
    platform: string; // String!
    url: string; // String!
    userId?: string | null; // String
  }
  UserInput: { // input type
    about?: string | null; // String
    education?: NexusGenInputs['EducationInput'] | null; // EducationInput
    email: string; // String!
    experiences: Array<NexusGenInputs['ExperienceInput'] | null>; // [ExperienceInput]!
    firstName: string; // String!
    lastName: string; // String!
    location?: NexusGenInputs['LocationInput'] | null; // LocationInput
    skills?: string[] | null; // [String!]
    socials?: NexusGenInputs['SocialInput'][] | null; // [SocialInput!]
    title: string; // String!
  }
}

export interface NexusGenEnums {
  ExperienceType: "PROJECT" | "WORK"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Education: { // root type
    description?: string | null; // String
    endDate: NexusGenScalars['DateTime']; // DateTime!
    fieldOfStudy: string; // String!
    id: string; // ID!
    institution: string; // String!
    startDate: NexusGenScalars['DateTime']; // DateTime!
  }
  Experience: { // root type
    company?: string | null; // String
    description?: string | null; // String
    endDate: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    imgSrc?: string | null; // String
    role?: string | null; // String
    startDate: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    tools: string[]; // [String!]!
    type: NexusGenEnums['ExperienceType']; // ExperienceType!
    url: string; // String!
    userId?: string | null; // String
  }
  Location: { // root type
    city: string; // String!
    country: string; // String!
    id: string; // ID!
    province: string; // String!
  }
  Mutation: {};
  Query: {};
  Social: { // root type
    id: string; // ID!
    platform: string; // String!
    url: string; // String!
    userId?: string | null; // String
  }
  User: { // root type
    about?: string | null; // String
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    skills: Array<string | null>; // [String]!
    title: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Education: { // field return type
    description: string | null; // String
    endDate: NexusGenScalars['DateTime']; // DateTime!
    fieldOfStudy: string; // String!
    id: string; // ID!
    institution: string; // String!
    startDate: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // ID!
  }
  Experience: { // field return type
    company: string | null; // String
    description: string | null; // String
    endDate: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    imgSrc: string | null; // String
    role: string | null; // String
    startDate: NexusGenScalars['DateTime']; // DateTime!
    title: string; // String!
    tools: string[]; // [String!]!
    type: NexusGenEnums['ExperienceType']; // ExperienceType!
    url: string; // String!
    user: NexusGenRootTypes['User']; // User!
    userId: string | null; // String
  }
  Location: { // field return type
    city: string; // String!
    country: string; // String!
    id: string; // ID!
    province: string; // String!
  }
  Mutation: { // field return type
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteExpereince: NexusGenRootTypes['Experience'] | null; // Experience
    deleteSocial: NexusGenRootTypes['Social'] | null; // Social
    deleteUser: NexusGenRootTypes['User'] | null; // User
    updateSkills: NexusGenRootTypes['User'] | null; // User
    upsertEducation: NexusGenRootTypes['Education'] | null; // Education
    upsertExperience: NexusGenRootTypes['Experience'] | null; // Experience
    upsertLocation: NexusGenRootTypes['Location'] | null; // Location
    upsertSocial: NexusGenRootTypes['Social'] | null; // Social
  }
  Query: { // field return type
    getEducationById: Array<NexusGenRootTypes['Education'] | null> | null; // [Education]
    getExperience: Array<NexusGenRootTypes['Experience'] | null> | null; // [Experience]
    getExperiences: Array<NexusGenRootTypes['Experience'] | null> | null; // [Experience]
    getSocials: Array<NexusGenRootTypes['Social'] | null> | null; // [Social]
    getSocialsById: Array<NexusGenRootTypes['Social'] | null> | null; // [Social]
    getUser: NexusGenRootTypes['User'] | null; // User
    getUserByEmail: NexusGenRootTypes['User'] | null; // User
    getUsers: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Social: { // field return type
    id: string; // ID!
    platform: string; // String!
    url: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // String
  }
  User: { // field return type
    about: string | null; // String
    education: NexusGenRootTypes['Education'] | null; // Education
    email: string; // String!
    experiences: NexusGenRootTypes['Experience'][]; // [Experience!]!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    location: NexusGenRootTypes['Location'] | null; // Location
    skills: Array<string | null>; // [String]!
    socials: NexusGenRootTypes['Social'][]; // [Social!]!
    title: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Education: { // field return type name
    description: 'String'
    endDate: 'DateTime'
    fieldOfStudy: 'String'
    id: 'ID'
    institution: 'String'
    startDate: 'DateTime'
    user: 'User'
    userId: 'ID'
  }
  Experience: { // field return type name
    company: 'String'
    description: 'String'
    endDate: 'DateTime'
    id: 'ID'
    imgSrc: 'String'
    role: 'String'
    startDate: 'DateTime'
    title: 'String'
    tools: 'String'
    type: 'ExperienceType'
    url: 'String'
    user: 'User'
    userId: 'String'
  }
  Location: { // field return type name
    city: 'String'
    country: 'String'
    id: 'ID'
    province: 'String'
  }
  Mutation: { // field return type name
    createUser: 'User'
    deleteExpereince: 'Experience'
    deleteSocial: 'Social'
    deleteUser: 'User'
    updateSkills: 'User'
    upsertEducation: 'Education'
    upsertExperience: 'Experience'
    upsertLocation: 'Location'
    upsertSocial: 'Social'
  }
  Query: { // field return type name
    getEducationById: 'Education'
    getExperience: 'Experience'
    getExperiences: 'Experience'
    getSocials: 'Social'
    getSocialsById: 'Social'
    getUser: 'User'
    getUserByEmail: 'User'
    getUsers: 'User'
  }
  Social: { // field return type name
    id: 'ID'
    platform: 'String'
    url: 'String'
    user: 'User'
    userId: 'String'
  }
  User: { // field return type name
    about: 'String'
    education: 'Education'
    email: 'String'
    experiences: 'Experience'
    firstName: 'String'
    id: 'ID'
    lastName: 'String'
    location: 'Location'
    skills: 'String'
    socials: 'Social'
    title: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      user: NexusGenInputs['UserInput']; // UserInput!
    }
    deleteExpereince: { // args
      id: string; // ID!
    }
    deleteSocial: { // args
      id: string; // ID!
    }
    deleteUser: { // args
      id: string; // ID!
    }
    updateSkills: { // args
      skills: string[]; // [String!]!
      userId: string; // ID!
    }
    upsertEducation: { // args
      education: NexusGenInputs['EducationInput']; // EducationInput!
      userId: string; // ID!
    }
    upsertExperience: { // args
      experience: NexusGenInputs['ExperienceInput']; // ExperienceInput!
    }
    upsertLocation: { // args
      location: NexusGenInputs['LocationInput']; // LocationInput!
      userId: string; // ID!
    }
    upsertSocial: { // args
      social: NexusGenInputs['SocialInput']; // SocialInput!
      socialId: string; // ID!
    }
  }
  Query: {
    getEducationById: { // args
      id: string; // ID!
      userId: string; // ID!
    }
    getExperience: { // args
      id?: string | null; // ID
      userId?: string | null; // ID
    }
    getExperiences: { // args
      endDate?: string | null; // String
      experienceType: NexusGenEnums['ExperienceType']; // ExperienceType!
      startDate?: string | null; // String
      userId: string; // ID!
    }
    getSocialsById: { // args
      userId: string; // ID!
    }
    getUser: { // args
      id: string; // ID!
    }
    getUserByEmail: { // args
      email: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: GraphQLContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}